// <auto-generated />
using EFCore.BulkExtensions.OwnedTypeTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore.BulkExtensions.OwnedTypeTest.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCore.BulkExtensions.OwnedTypeTest.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasDiscriminator<string>("Type").HasValue("Contact");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EFCore.BulkExtensions.OwnedTypeTest.Business", b =>
                {
                    b.HasBaseType("EFCore.BulkExtensions.OwnedTypeTest.Contact");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("Business");
                });

            modelBuilder.Entity("EFCore.BulkExtensions.OwnedTypeTest.Person", b =>
                {
                    b.HasBaseType("EFCore.BulkExtensions.OwnedTypeTest.Contact");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("EFCore.BulkExtensions.OwnedTypeTest.Contact", b =>
                {
                    b.OwnsOne("EFCore.BulkExtensions.OwnedTypeTest.Address", "MailingAddress", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .HasColumnType("int");

                            b1.Property<string>("CityStateZip")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("StreetAddress")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.OwnsOne("EFCore.BulkExtensions.OwnedTypeTest.Address", "PhysicalAddress", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .HasColumnType("int");

                            b1.Property<string>("CityStateZip")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("StreetAddress")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.Navigation("MailingAddress")
                        .IsRequired();

                    b.Navigation("PhysicalAddress")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
